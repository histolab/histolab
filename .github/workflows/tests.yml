name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    paths:
      - "docs/**"
      - "histolab/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/tests.yml"
      - ".pre-commit-config.yaml"

jobs:
  wsi-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Cache WSI files
        uses: actions/cache@v3
        id: cache-wsis
        with:
          path: tests/fixtures/external-svs
          key: wsi-files

      - name: Download WSI artifacts
        if: steps.cache-wsis.outputs.cache-hit != 'true'
        id: load-wsis
        run: |
          mkdir -p tests/fixtures/external-svs
          wget https://dbarchive.biosciencedbc.jp/data/open-tggates-pathological-images/LATEST/images/isoniazid/Liver/2458.svs -O tests/fixtures/external-svs/liver-1.svs
          wget http://openslide.cs.cmu.edu/download/openslide-testdata/Aperio/CMU-3.svs -O tests/fixtures/external-svs/cmu-3.svs

      - name: Temporarly save WSI artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wsi-artifact
          path: tests/fixtures/external-svs
          retention-days: 1

  build:
    needs: wsi-artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - os: ubuntu-latest
            cache-path: ~/.cache/pypoetry/virtualenvs
          - os: windows-latest
            cache-path: ~\AppData\Local\pypoetry\Cache
          - os: macOs-latest
            cache-path: ~/Library/Caches/pypoetry/cache
        exclude:
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          cache: "poetry"

      - name: Install Pixman 0.40 on Ubuntu
        id: pixman-ubuntu
        if: ${{ runner.os == 'Linux' }}
        run: |
          wget https://www.cairographics.org/releases/pixman-0.40.0.tar.gz
          tar -xvf pixman-0.40.0.tar.gz
          cd pixman-0.40.0
          ./configure
          make
          sudo make install
          cd ..

      - name: Install openslide
        id: install-openslide
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt install openslide-tools
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install openslide
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install wget
            choco install 7zip-zstd
            wget https://github.com/openslide/openslide-winbuild/releases/download/v20171122/openslide-win64-20171122.zip -P /c/downloads
            7z e /c/downloads/openslide-win64-20171122.zip -aoa
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash

      - uses: msys2/setup-msys2@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          update: true

      - name: Install Pixman 0.40 on Windows
        id: pixman-windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          pacman --noconfirm -S --needed mingw-w64-x86_64-pixman
          pacman -Ql mingw-w64-x86_64-pixman
          cp /mingw64/bin/libpixman-1-0.dll .
        shell: msys2 {0}

      - run: poetry run python --version
      - run: poetry install
        if: steps.setup-python.outputs.cache-hit != 'true'

      - name: Retrieve saved WSIs
        uses: actions/download-artifact@v2
        with:
          name: wsi-artifact
          path: tests/fixtures/external-svs

      - name: Test with pytest
        id: tests
        run: |
          poetry run python -m pytest --ignore=tests/benchmarks --cov=histolab --cov-report=xml

      - name: DocTests
        id: doctests
        run: |
          poetry run python -m pytest histolab/ --doctest-modules

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: false

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
        if: failure()

  delete-wsi-artifacts:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: wsi-artifact
          failOnError: false
